{"ast":null,"code":"var NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX,\n      currentT,\n      i = 0;\n\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n\n  return aGuessT;\n}\n\nmodule.exports = function bezier(mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n\n    --currentSample;\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x;\n    }\n\n    if (x === 0) {\n      return 0;\n    }\n\n    if (x === 1) {\n      return 1;\n    }\n\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};","map":{"version":3,"sources":["/Users/pwamsley/Desktop/important/programming/training/node_modules/animated/lib/bezier.js"],"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","module","exports","bezier","mY1","mY2","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x"],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\nvar NEWTON_ITERATIONS=4;\nvar NEWTON_MIN_SLOPE=0.001;\nvar SUBDIVISION_PRECISION=0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS=10;\n\nvar kSplineTableSize=11;\nvar kSampleStepSize=1.0/(kSplineTableSize-1.0);\n\nvar float32ArraySupported=typeof Float32Array==='function';\n\nfunction A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\nfunction B(aA1,aA2){return 3.0*aA2-6.0*aA1;}\nfunction C(aA1){return 3.0*aA1;}\n\n\nfunction calcBezier(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}\n\n\nfunction getSlope(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}\n\nfunction binarySubdivide(aX,aA,aB,mX1,mX2){\nvar currentX,currentT,i=0;\ndo{\ncurrentT=aA+(aB-aA)/2.0;\ncurrentX=calcBezier(currentT,mX1,mX2)-aX;\nif(currentX>0.0){\naB=currentT;\n}else{\naA=currentT;\n}\n}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);\nreturn currentT;\n}\n\nfunction newtonRaphsonIterate(aX,aGuessT,mX1,mX2){\nfor(var i=0;i<NEWTON_ITERATIONS;++i){\nvar currentSlope=getSlope(aGuessT,mX1,mX2);\nif(currentSlope===0.0){\nreturn aGuessT;\n}\nvar currentX=calcBezier(aGuessT,mX1,mX2)-aX;\naGuessT-=currentX/currentSlope;\n}\nreturn aGuessT;\n}\n\nmodule.exports=function bezier(mX1,mY1,mX2,mY2){\nif(!(0<=mX1&&mX1<=1&&0<=mX2&&mX2<=1)){\nthrow new Error('bezier x values must be in [0, 1] range');\n}\n\n\nvar sampleValues=float32ArraySupported?new Float32Array(kSplineTableSize):new Array(kSplineTableSize);\nif(mX1!==mY1||mX2!==mY2){\nfor(var i=0;i<kSplineTableSize;++i){\nsampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);\n}\n}\n\nfunction getTForX(aX){\nvar intervalStart=0.0;\nvar currentSample=1;\nvar lastSample=kSplineTableSize-1;\n\nfor(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){\nintervalStart+=kSampleStepSize;\n}\n--currentSample;\n\n\nvar dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);\nvar guessForT=intervalStart+dist*kSampleStepSize;\n\nvar initialSlope=getSlope(guessForT,mX1,mX2);\nif(initialSlope>=NEWTON_MIN_SLOPE){\nreturn newtonRaphsonIterate(aX,guessForT,mX1,mX2);\n}else if(initialSlope===0.0){\nreturn guessForT;\n}else{\nreturn binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);\n}\n}\n\nreturn function BezierEasing(x){\nif(mX1===mY1&&mX2===mY2){\nreturn x;\n}\n\nif(x===0){\nreturn 0;\n}\nif(x===1){\nreturn 1;\n}\nreturn calcBezier(getTForX(x),mY1,mY2);\n};\n};"]},"metadata":{},"sourceType":"script"}