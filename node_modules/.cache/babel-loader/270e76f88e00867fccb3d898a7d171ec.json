{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar normalizeColor = require('normalize-css-color');\n\nvar invariant = require('invariant');\n\nvar linear = function linear(t) {\n  return t;\n};\n\nvar Interpolation = function () {\n  function Interpolation() {\n    _classCallCheck(this, Interpolation);\n  }\n\n  _createClass(Interpolation, null, [{\n    key: 'create',\n    value: function create(config) {\n      if (config.outputRange && typeof config.outputRange[0] === 'string') {\n        return createInterpolationFromStringOutputRange(config);\n      }\n\n      var outputRange = config.outputRange;\n      checkInfiniteRange('outputRange', outputRange);\n      var inputRange = config.inputRange;\n      checkInfiniteRange('inputRange', inputRange);\n      checkValidInputRange(inputRange);\n      invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n      var easing = config.easing || linear;\n      var extrapolateLeft = 'extend';\n\n      if (config.extrapolateLeft !== undefined) {\n        extrapolateLeft = config.extrapolateLeft;\n      } else if (config.extrapolate !== undefined) {\n        extrapolateLeft = config.extrapolate;\n      }\n\n      var extrapolateRight = 'extend';\n\n      if (config.extrapolateRight !== undefined) {\n        extrapolateRight = config.extrapolateRight;\n      } else if (config.extrapolate !== undefined) {\n        extrapolateRight = config.extrapolate;\n      }\n\n      return function (input) {\n        invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n        var range = findRange(input, inputRange);\n        return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n      };\n    }\n  }]);\n\n  return Interpolation;\n}();\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {}\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {}\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  }\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  result = easing(result);\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var int32Color = normalizeColor(input);\n\n  if (int32Color === null) {\n    return input;\n  }\n\n  int32Color = int32Color || 0;\n  var r = (int32Color & 0xff000000) >>> 24;\n  var g = (int32Color & 0x00ff0000) >>> 16;\n  var b = (int32Color & 0x0000ff00) >>> 8;\n  var a = (int32Color & 0x000000ff) / 255;\n  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';\n}\n\nvar stringShapeRegex = /[0-9\\.-]+/g;\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return Interpolation.create(_extends({}, config, {\n      outputRange: outputRanges[i]\n    }));\n  });\n  var shouldRound = /^rgb/.test(outputRange[0]);\n  return function (input) {\n    var i = 0;\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = interpolations[i++](input);\n      return String(shouldRound && i < 4 ? Math.round(val) : val);\n    });\n  };\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  for (var i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nmodule.exports = Interpolation;","map":{"version":3,"sources":["/Users/pwamsley/Desktop/important/programming/training/node_modules/animated/lib/Interpolation.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","_classCallCheck","instance","TypeError","normalizeColor","require","invariant","linear","t","Interpolation","value","create","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","int32Color","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","number","push","interpolations","shouldRound","test","replace","val","String","Math","round","arr","pattern","name","module","exports"],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}\n\nvar normalizeColor=require('normalize-css-color');\n\nvar invariant=require('invariant');\n\n\n\n\n\n\n\n\n\n\n\n\nvar linear=function linear(t){return t;};var\n\n\n\n\n\nInterpolation=function(){function Interpolation(){_classCallCheck(this,Interpolation);}_createClass(Interpolation,null,[{key:'create',value:function create(\nconfig){\n\nif(config.outputRange&&typeof config.outputRange[0]==='string'){\nreturn createInterpolationFromStringOutputRange(config);\n}\n\nvar outputRange=config.outputRange;\ncheckInfiniteRange('outputRange',outputRange);\n\nvar inputRange=config.inputRange;\ncheckInfiniteRange('inputRange',inputRange);\ncheckValidInputRange(inputRange);\n\ninvariant(\ninputRange.length===outputRange.length,\n'inputRange ('+inputRange.length+') and outputRange ('+\noutputRange.length+') must have the same length');\n\n\nvar easing=config.easing||linear;\n\nvar extrapolateLeft='extend';\nif(config.extrapolateLeft!==undefined){\nextrapolateLeft=config.extrapolateLeft;\n}else if(config.extrapolate!==undefined){\nextrapolateLeft=config.extrapolate;\n}\n\nvar extrapolateRight='extend';\nif(config.extrapolateRight!==undefined){\nextrapolateRight=config.extrapolateRight;\n}else if(config.extrapolate!==undefined){\nextrapolateRight=config.extrapolate;\n}\n\nreturn function(input){\ninvariant(\ntypeof input==='number',\n'Cannot interpolation an input which is not a number');\n\n\nvar range=findRange(input,inputRange);\nreturn interpolate(\ninput,\ninputRange[range],\ninputRange[range+1],\noutputRange[range],\noutputRange[range+1],\neasing,\nextrapolateLeft,\nextrapolateRight);\n\n};\n}}]);return Interpolation;}();\n\n\nfunction interpolate(\ninput,\ninputMin,\ninputMax,\noutputMin,\noutputMax,\neasing,\nextrapolateLeft,\nextrapolateRight)\n{\nvar result=input;\n\n\nif(result<inputMin){\nif(extrapolateLeft==='identity'){\nreturn result;\n}else if(extrapolateLeft==='clamp'){\nresult=inputMin;\n}else if(extrapolateLeft==='extend'){\n\n}\n}\n\nif(result>inputMax){\nif(extrapolateRight==='identity'){\nreturn result;\n}else if(extrapolateRight==='clamp'){\nresult=inputMax;\n}else if(extrapolateRight==='extend'){\n\n}\n}\n\nif(outputMin===outputMax){\nreturn outputMin;\n}\n\nif(inputMin===inputMax){\nif(input<=inputMin){\nreturn outputMin;\n}\nreturn outputMax;\n}\n\n\nif(inputMin===-Infinity){\nresult=-result;\n}else if(inputMax===Infinity){\nresult=result-inputMin;\n}else{\nresult=(result-inputMin)/(inputMax-inputMin);\n}\n\n\nresult=easing(result);\n\n\nif(outputMin===-Infinity){\nresult=-result;\n}else if(outputMax===Infinity){\nresult=result+outputMin;\n}else{\nresult=result*(outputMax-outputMin)+outputMin;\n}\n\nreturn result;\n}\n\nfunction colorToRgba(input){\nvar int32Color=normalizeColor(input);\nif(int32Color===null){\nreturn input;\n}\n\nint32Color=int32Color||0;\n\nvar r=(int32Color&0xff000000)>>>24;\nvar g=(int32Color&0x00ff0000)>>>16;\nvar b=(int32Color&0x0000ff00)>>>8;\nvar a=(int32Color&0x000000ff)/255;\n\nreturn'rgba('+r+', '+g+', '+b+', '+a+')';\n}\n\nvar stringShapeRegex=/[0-9\\.-]+/g;\n\n\n\n\n\n\n\n\n\nfunction createInterpolationFromStringOutputRange(\nconfig)\n{\nvar outputRange=config.outputRange;\ninvariant(outputRange.length>=2,'Bad output range');\noutputRange=outputRange.map(colorToRgba);\ncheckPattern(outputRange);\n\n\n\n\n\n\n\n\n\n\n\n\nvar outputRanges=outputRange[0].match(stringShapeRegex).map(function(){return[];});\noutputRange.forEach(function(value){\n\n\n\nvalue.match(stringShapeRegex).forEach(function(number,i){\noutputRanges[i].push(+number);\n});\n});\n\n\n\n\nvar interpolations=outputRange[0].match(stringShapeRegex).map(function(value,i){\nreturn Interpolation.create(_extends({},\nconfig,{\noutputRange:outputRanges[i]}));\n\n});\n\n\n\nvar shouldRound=/^rgb/.test(outputRange[0]);\n\nreturn function(input){\nvar i=0;\n\n\n\nreturn outputRange[0].replace(stringShapeRegex,function(){\nvar val=interpolations[i++](input);\nreturn String(shouldRound&&i<4?Math.round(val):val);\n});\n};\n}\n\nfunction checkPattern(arr){\nvar pattern=arr[0].replace(stringShapeRegex,'');\nfor(var i=1;i<arr.length;++i){\ninvariant(\npattern===arr[i].replace(stringShapeRegex,''),\n'invalid pattern '+arr[0]+' and '+arr[i]);\n\n}\n}\n\nfunction findRange(input,inputRange){\nfor(var i=1;i<inputRange.length-1;++i){\nif(inputRange[i]>=input){\nbreak;\n}\n}\nreturn i-1;\n}\n\nfunction checkValidInputRange(arr){\ninvariant(arr.length>=2,'inputRange must have at least 2 elements');\nfor(var i=1;i<arr.length;++i){\ninvariant(\narr[i]>=arr[i-1],\n\n\n\n\n\n\n'inputRange must be monotonically increasing '+arr);\n\n}\n}\n\nfunction checkInfiniteRange(name,arr){\ninvariant(arr.length>=2,name+' must have at least 2 elements');\ninvariant(\narr.length!==2||arr[0]!==-Infinity||arr[1]!==Infinity,\n\n\n\n\n\n\nname+'cannot be ]-infinity;+infinity[ '+arr);\n\n}\n\nmodule.exports=Interpolation;"]},"metadata":{},"sourceType":"script"}